options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)package kr.ac.snu.ids.PRJ1_1_2017_19428;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SELECT = 4;  public static final int PRINT_INSERT = 5;  public static final int PRINT_DELETE = 6;  public static final int PRINT_SHOW_TABLES = 7;      public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2017-19428> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    System.out.print("DB_2017-19428> ");    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;	  case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLE\' requested");      	break;    }    System.out.print("DB_2017-19428> ");  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords  - > follow earlier definition (in case of identifiers)*/{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < INSERT_INTO : "insert into" >| < DELETE_FROM : "delete from" >| < NOT_NULL : "not null" >| < NULL : "null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < VALUES : "values" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < IS : "is" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < ASTERISK : "*" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < PERIOD : "." >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >| < QUOTE : "'" >| < NON_QUOTE_SPECIAL_CHARACTERS : [ "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=", "|", "\\", "`", "~", ":", ";", "?", "/", ">", "<", ".", ",",  "{", "}", "[", "]" ] >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < DATE_VALUE  : < NNNN > "-" < NN > "-" < NN > >| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >}// QUERY startsvoid command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  (    createTableQuery()    {      q = PRINT_CREATE_TABLE;    }    |     dropTableQuery()    {      q = PRINT_DROP_TABLE;    }	|     descQuery()    {      q = PRINT_DESC;    }	|     selectQuery()    {      q = PRINT_SELECT;    }	|     insertQuery()    {      q = PRINT_INSERT;    } 	|     deleteQuery()    {      q = PRINT_DELETE;    }	|     showTablesQuery()    {      q = PRINT_SHOW_TABLES;    }  )  (    {      return q;    }  )}// QUERY finishes// DROP TABLE startsvoid dropTableQuery() :{}{  < DROP_TABLE >  tableName()}// DROP TABLE finishes// DESC startsvoid descQuery() :{}{  < DESC >  tableName()}// DESC finishes// SHOW TABLE startsvoid showTablesQuery() :{}{  < SHOW_TABLES >}// SHOW TABLE finishes// SELECT startsvoid selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < ASTERISK >| selectedColumn()  (    < COMMA >	selectedColumn()  )*}void selectedColumn() :{}{	(	  LOOKAHEAD(2)	  tableName()	  < PERIOD >	)?	columnName()	(	  < AS >	  columnName()	)?}void tableExpression() :{}{  fromClause()  (    whereClause()  )?}void fromClause() :{}{  < FROM >  tableReferenceList()}void tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}void referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}void whereClause() :{}{  < WHERE >  booleanValueExpression()}void booleanValueExpression() : //SUM OF PRODUCTs{}{  booleanTerm()  (    < OR >    booleanTerm()  )*}void booleanTerm() :{}{  booleanFactor()  (    < AND >    booleanFactor()  )*}void booleanFactor() :{}{  (    < NOT >  )?  booleanTest()}void booleanTest() :{}{  predicate()| parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}void predicate() :{}{  LOOKAHEAD(4)  comparisonPredicate()| LOOKAHEAD(4)  nullPredicate()}void comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}void compOperand() :{}{  comparableValue()| (  	LOOKAHEAD(2)  	tableName()  	< PERIOD >   )?  columnName()}void compOp() :{}{  < COMP_OP >}void comparableValue() :{}{  < INT_VALUE >| < CHAR_STRING >| < DATE_VALUE >}void nullPredicate() :{}{  (    LOOKAHEAD(2)    tableName()    < PERIOD >   )?  columnName()  nullOperation()}void nullOperation() :{}{  < IS >  (    < NOT >  )?  < NULL >}// SELECT finishes// INSERT startsvoid insertQuery() :{}{  < INSERT_INTO >  tableName()  insertColumnsAndSource()}void insertColumnsAndSource() :{}{  (    columnNameList()   )?  valueList()}void valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN > }void value() :{}{  < NULL >| comparableValue() }// INSERT finishes// DELETE startsvoid deleteQuery() :{}{  < DELETE_FROM >  tableName()  (    whereClause()  )?}// CREATE TABLE startsvoid createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT_NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}